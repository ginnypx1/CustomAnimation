Animation Presentation Things To Do

Position and Size: bounds, frame, center (probably constraint animation)
Transformation: transform: translation, rotation, scale (sometimes constraint animation)
Appearance: backgroundColor, alpha (never need to worry about constraints)

Often, you want to:
    1. create and setup helper view
    2. fade helper view in using animations: of UIView.animate()
    3. update background view and remove helper view using completion: of UIView.animate()

1. positionSquaresOutOfView - removes the four views from the main view so they can be animated in, prep work
2. pullSquaresToMiddle - most basic UIView.animate(withDuration:) example (Can be done with springs to demo full block) 
3. squaresToCircles - demos a basic layer animation by altering the cornerRadius of the view
4. changeBackgroundView - basic UIView.animate, can introduce delay, change entire screen
5. fadeOut/fadeIn - demos how popular fade in and out is done, introduces the concept of UIView.animateKeyframes 
    Keyframes useful to chain animations, or define complex animation
6. moveCirclesToRight - adds in the spring damping option to the basic UIView.animate(withDuration:)
    * Any easing curve options are negated when you add in spring damping
    * The smaller the damping, the more the view bounces at the end. 1 is straight animation.
7. movesCirclesToLeft() - adds in the concept of the four timing curves and allows user to compare each
        Options that can be passed in: delay before starting, type of timing curve, number of times to repeat (.repeat), if animation should reverse (.autoreverse), if touchEvents are delivered while animation is in progress (.allowUserInteraction), if it should interrupt other animations or wait for completion (.overrideInheritedDuration, .overrideInheritedCurve, .beginFromCurrentState)
8. oneBigDot - adds in the concept of transform, CGAffineTransform, to make the dot bigger
    - can be concatenated with .concatenating()
    Usually will follow steps:
        1. Create and set up helper label
        2. fade out and translate real label
        3. fade in and translate helper label
        4. update real label and remove helper

/*****************************************************************************/
- constraint animation

** if you animate a view with autolayout constraints, the view will snap back to constrained position after animation

- constaints have a multiplier and a constant
- constants are very easy to animate. 
    Just add or subtract to contraint outside of animation, then in UIView.animate(), call view.layoutIfNeeded()
- multipliers are read only, so you have to remove and replace them.
    fancyConstraint.isActive
    - easiest if you give the constraint an identifier in storyboard
    if constraint.identifier == "StoryboardID" {
        constraint.isActive = false
        let newConstraint = NSLayoutConstraint(item: titleLable, attribute: .centerY, relatedBy: .equal, toItem: titleLabel.superview!, attribute: .centerY, multiplier: 1.5, constant: 5.0)
        newConstraint.identifier = "StoryboardID"
        newConstraint.isActive = true
    }


/*****************************************************************************/
Transitions

UIView.transition(withView:duration:options:animations:completion:)
    show, hide
    add subviews, remove subviews
UiView.transition(fromView:toView:duration:options:completion:)
.transitionFlipFromLeft (Right)
.transitionCurlUp (Down)
.transitionFlipFromBottom (Top)
.transitionCrossDissolve

Triggers: 1. toggle .isHidden, 2. addSubview(), 3. removeFromSuperview()
    - .isHidden acts as its own container view but
    - to remove or add views, you need a separate container view

UIView.transition(with: view, duration: 1.0, options: .transitionFlipFromTop, animations: {
    view.isHidden = true
}, completion: nil)

let aView = label.superview!
UIView.transition(with: aView, duration: 1.0, options: [.curveEaseIn, .transitionCurlUp], animations: {
    self.label.removeFromSuperview()
}, completion: { finished in
    aView.addSubview(self.label)
})

- transitions can't have a delay. Workaround is:
func delay(seconds: Double, completion: @escaping ()->Void) {
    DispatchQueue.main.asyncAfter(deadline: .now() + seconds, execute: completion)
}

- Add .allowUserInteraction to options if needed (Buttons, scrollView, always be interactive)

/*****************************************************************************/
UIViewPropertyAnimator:
    let anim = UIViewPropertyAnimator(duration: 1.0, curve: .linear) {
        self.view.backgroundColor = red
    }
    anim.startAnimation() 
    // .pauseAnimation(), .stopAnimation(bool), if false, can be told to finishlater
    // .continueAnimation(withTimingParameters:durationFactor:)
    // .startAnimation(afterDelay:)

Disadvantages: will not help with repeating, autoreversing, ore transitions
Advantages: full range of timing curves, multiple completion functions, ability to pause, resume, reverse & interact

.state - .inactive before starting, .active after, returns to .inactive
.fractionComplete
.addCompletion(_:)
.addAnimations(_:), .addAnimations(-:delayFactor:)
.performWithoutAnimation(-:) can go anywhere inside

Timing Curves: ** detail in Programming iOS10 Animation Notes

/*****************************************************************************/

CORE ANIMATION
Use Core Animation to animate a layer's: 
    size and position
    center
    Z order
    shadow
    transformations in 3D space
    border (rounded Corners)
    add or remove from hierarcy
    stretching during resizing
    current contents
    clipping of sublayers
    opacity
    rasterization behavior
// use it as a mask, animate gradient


/*****************************************************************************/
Animated View Controller Transitions

UIModalTransitionStyle: .coverVertical (default, slide from bottom), .flipHorizontal, .crossDissolve, .partialCurl

Default side slide
Drop from above, fall into place (bounce, snap like spring) // check AnimationTests

1. Custom one to another - expands out from center
2. Custom Collection View Cell - tap to expand, contract to/from full screen
3. Custom TableView Cells - slide up animation

1. Need a TransitionContext: a container view - a superview for all views used in transition
    - will give you access to parameters and viewControllers in the transition
    Delegate: UIViewControllerTransitioningDelegate
        - func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning?
        - func animationController(forDismissed dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning?

    class Animator: NSObject, UIViewControllerAnimatedTransitioning {
        let duration = 1.0
        let originFrame = CGRect.zero
        var presenting = true
        func transitionDuration { return duration }
        func animateTransition { 
            // 1. Set up Transition
            // all the views you want to animate and their state at start of transition
            let containerView = transitionContext.containerView
            let toView = transitionContext.view(forKey: .to)!
            ...
            containerView.addSubview(toView)

            // 2. Animate!
            UIView.animate(withDuration: 1.0, delay: 0.0, options: [], animations: {

            }, 
            // 3. Complete Transition
            completion: { _ in
                transitionContext.completeTransition(true)
            })
        }
    }

2. Also need an Animator: object conforming to UIViewControllerAnimatedTransitioning
    - func transitionDuration(using transitionContext: UIViewControllerContextTransitioning)
    - func animateTransition(using transitionContext: UiViewControllerContextTransitioning)

    extension ViewController: UIViewControllerTransitioningDelegate {
      let transition = Animator()
      func animationController(forPresented) { 
        transition.presenting = true
        return transition 
      }
      func animationController(forDismissed) { 
        transition.presenting = false
        return transition 
      }

      in function which segues to new view: newView.transitioningDelegate = self
    }

